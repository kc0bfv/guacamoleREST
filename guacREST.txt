Help on module guacREST:

NAME
    guacREST - Based on API reference at https://github.com/ridvanaltun/guacamole-rest-api-documentation

DESCRIPTION
    To use this, simply run the file with a "--help" option.
    
    To improve upon this, well, you need to know a little more.  The CommandFile class is the main handler, facilitating parsing of the command file, and executing the commands.  The meat of the code is in GuacConnection though.  The commands are implemented and described there.

CLASSES
    builtins.object
        Command
        CommandFile
        GuacConnection
    
    class Command(builtins.object)
     |  Command(command, args)
     |  
     |  Defines a command from the command file, keeps track of known commands, and understands how to call the underlying code from a command specified in the command file
     |  
     |  Methods defined here:
     |  
     |  __init__(self, command, args)
     |      Initialize the Command - takes a command name and a list of arguments.  The result may be executed using the execute function and by passing an initialized GuacConnection
     |  
     |  execute(self, target)
     |      Executes a command against a target GuacConnection object
     |      
     |      :param target: the initialized GuacConnection to execute upon
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  register(func) from builtins.type
     |      This decorator registers a function name from a GuacConnection function and remembers it, so it can be called from the command file by name
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  registered = {'add_user': <function GuacConnection.add_user>, 'add_vnc...
    
    class CommandFile(builtins.object)
     |  CommandFile(cmd_file, delay=False)
     |  
     |  Parses and runs the command file.  Expects the file to contain one json object with keys "server", "admin_user", "initial_admin_pass", "desired_admin_pass", and "commands".  Each must have a value that's a string, except "commands" which has a list.
     |  
     |  server: the URL of the server to connect to, like "https://example.com:4000/"
     |  admin_user: the username of the admin user, often "guacadmin"
     |  initial_admin_pass: the original password of the admin user, which will change as soon as possible, often "guacadmin"
     |  desired_admin_pass: the desired password of the admin user, which gets changed early then can be used on subsequent executions automatically
     |  commands: a json list of commands
     |  
     |  Commands are also json lists, with a varying number of elements depending on the command.  Commands are defined in the GuacConnection class, and their parameters are documented there.  An example commands list is:
     |  
     |  [
     |      ["add_user", "user_one", "user_one_password"],
     |      ["add_vnc_connection", "kali_one", "10.1.1.15", 5901, "vnc_pass"],
     |      ["pair_user_connection", "user_one", "kali_one"]
     |  ]
     |  
     |  Methods defined here:
     |  
     |  __init__(self, cmd_file, delay=False)
     |      :param cmd_file: an open command file that can be read-from
     |      :param delay: instructs the GuacConnection to delay for a period
     |  
     |  run(self)
     |      Execute the commands in the command file
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class GuacConnection(builtins.object)
     |  GuacConnection(urlbase, admin_user='guacadmin', admin_pass='guacadmin')
     |  
     |  Methods defined here:
     |  
     |  __init__(self, urlbase, admin_user='guacadmin', admin_pass='guacadmin')
     |      Initialize the GuacConnection object.  After this, initialize the connection by running the init_guac function.
     |      
     |      :param urlbase: the base URL for the guac server
     |      :param admin_user: the admin username for the guac server, typically "guacadmin"
     |      :param admin_pass: the initial password for the guac admin, typically "guacadmin".  During init_guac, GuacConnection will try this password first, and if it succeeds init_guac will change the password immediately.  If admin_pass fails, then init_guac will try the desired final admin password automatically.  That way, a command file can run multiple times without needing to worry about the current state of the admin password.
     |  
     |  add_user(self, username, password)
     |      Command - add a Guacamole user.  Example command entry:
     |      
     |          ["add_user", "username", "password"]
     |      
     |      :param username: the Guacamole user name
     |      :param password: the user password
     |  
     |  add_vnc_connection(self, name, host, port, password)
     |      Command - create a VNC connection.  Example command entry:
     |      
     |          ["add_vnc_connection", "connection name", "connection_host", 80, "password"]
     |      
     |      :param name: the connection to pair the user to
     |      :param host: the hostname or address of the VNC server
     |      :param port: the port the VNC server is running on
     |      :param password: the VNC server password
     |  
     |  init_guac(self, desired_pass)
     |      Initialize the Guacamole connection by getting a token and setting
     |      a new administrator password.
     |      :param desired_pass: the desired password to set
     |  
     |  nop(self, *args, **kwargs)
     |      Command - nop.  Does nothing.  It's useful when you're using Ansible or something automated to create the command file, and the template language is running through a list and doesn't have a good way to leave the last comma off the command list.  With nop you can let it create that list with the last comma, then you can put in a nop with no comma afterwards.
     |      
     |          ["nop"]
     |  
     |  pair_user_connection(self, username, conn_name)
     |      Command - pair a user with a connection.  Example command entry:
     |      
     |          ["pair_user_connection", "user", "connection"]
     |      
     |      :param username: the username to pair up
     |      :param conn_name: the connection to pair the user to
     |  
     |  wait_on_server(self, add_delay=False)
     |      Waits for the server to respond, then if add_delay is set waits an additional period
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)

FUNCTIONS
    require_token(func)
        Validates that the self object has a token set on it, thus ensuring that the object has retrieved a token as part of the login process.

FILE
    /home/finity/Documents/Code/guacamoleREST/guacREST.py


